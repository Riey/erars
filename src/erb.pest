// ident

ident = @{ (XID_START | "_") ~ (XID_CONTINUE | "_")* }

// string

string = ${ "\"" ~ string_inner ~ "\"" }
string_inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

// number

num = @{ ("+" | "-")? ~ ASCII_DIGIT+ }

binop = _{
    add | sub | mul | div | rem | shl | shr
    | bitxor | bitand | bitor | xor | and | or
    | lt | le | gt | ge | eq | ne
}
    add         = { "+" }
    sub         = { "-" }
    mul         = { "*" }
    div         = { "/" }
    rem         = { "%" }
    shl         = { "<<" }
    shr         = { ">>" }
    bitxor      = { "^" }
    bitand      = { "&" }
    bitor       = { "|" }
    xor         = { "^^" }
    and         = { "&&" }
    or          = { "||" }
    lt          = { "<" }
    le          = { "<=" }
    gt          = { ">" }
    ge          = { ">=" }
    eq          = { "==" }
    ne          = { "!=" }


// expression

formstring_expr = { &("{" | "%") ~ print_form_text }
binop_expr = { term ~ (binop ~ term)+ }
method_expr = { ident ~ "(" ~ comma_seq ~ ")" }
var_expr = { ident ~ (":" ~ term)* }

expr = { binop_expr | method_expr | formstring_expr | term }
term = _{ string | num | var_expr | "(" ~ expr ~ ")" }
comma_seq = _{ term ~ ("," ~ term)* }
comma_pair = _{ term ~ "," ~ term }


// commands

print_flag = { ^"W" | ^"L" }
print_text = { print_char* }
	print_char = _{ !NEWLINE ~ ANY }
print_form_text = { print_form_normal_text ~ (print_form_var_text ~ print_form_normal_text)* }
	print_form_var_text = _{
    	"%" ~ expr ~ "%" |
    	"{" ~ expr ~ "}"
    }
	print_form_normal_text = @{ print_normal_char* }
	print_normal_char = _{ !( "%" | "{" | "}" | NEWLINE) ~ ANY }
print_com = { ^"PRINT" ~ print_flag? ~ print_text? }
printform_com = { ^"PRINTFORM" ~ print_flag? ~ print_form_text? }

call_com = { ^"CALL" ~ ident ~ expr? }
addchara_com = { ^"ADDCHARA" ~ comma_seq }
delchara_com = { ^"DELCHARA" ~ comma_seq }
swapchara_com = { ^"SWAPCHARA" ~ comma_pair }
drawline_com = { ^"DRAWLINE" }
alignment_com = { ^"ALIGNMENT" ~ alignment}
	alignment = { (^"LEFT" | ^"CENTER" | ^"RIGHT") }
input_com = { ^"INPUT" }
inputs_com = { ^"INPUTS" }

// control flow

sif_com = { ^"SIF" ~ expr ~ NEWLINE+ ~ program_line }
if_com = { ^"IF" ~ expr ~ NEWLINE ~ (NEWLINE | program_line)* ~ (^"ELSEIF" ~ expr ~ NEWLINE ~ (NEWLINE | program_line)*)* ~ (^"ELSE" ~ NEWLINE ~ (NEWLINE | program_line)*)? ~ "ENDIF"}
goto_com = { ^"GOTO" ~ ident }

goto_label = @{ "$" ~ ident }

// assign

assign_line = { expr ~ "=" ~ expr }

program_line = _{ printform_com | print_com | call_com | addchara_com | delchara_com | swapchara_com | drawline_com | alignment_com | input_com | inputs_com | goto_com | goto_label | assign_line | sif_com | if_com }

function_label = { "@" ~ ident }
function = { function_label ~ (program_line | NEWLINE)* }

program = _{ SOI ~ (function | NEWLINE)* ~ EOI }

WHITESPACE = _{ " " | "\t" }
COMMENT = _{ ";" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }